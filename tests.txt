
--------------------------- Test Cases for Shop Management -----------------------------

→ Create a new shop:
 Method: POST
 URL: http://localhost:3000/shops
 Body: 
        {
              "name": "Shop name"
        }
 Expected Response: 201 Created + body

→ Create shop without a name (failure):
 Method: POST
 URL: http://localhost:3000/shops
 Body: 
        {
            
        }
 Expected Response: 400 Bad Request + message

→ Get all shops:
 Method: GET
 URL: http://localhost:3000/shops
 Expected Response: 200 OK + body

→ Get a shop by ID:
 Method: GET
 URL: http://localhost:3000/shops/1 (Replace 1 with a valid shop ID)
 Expected Response: 200 OK + body

→ Get a shop by invalid shop ID (failure):
 Method: GET
 URL: http://localhost:3000/shops/9999 
 Expected Response: 404 Not Found + message

→ Update a shop:
 Method: PUT
 URL: http://localhost:3000/shops/1 (Replace 1 with a valid shop ID)
 Body: 
        {
               "name": "Updated shop name"
        }
 Expected Response: 200 OK + body

 → Update a shop without a name (failure):
 Method: PUT
 URL: http://localhost:3000/shops/1 (Replace 1 with a valid shop ID)
 Body: 
        {
               
        }
Expected Response: 400 Bad Request + message

→ Update non-existent shop (failure):
 Method: PUT
 URL: http://localhost:3000/shops/9999
 Body: 
        {
              "name": "Non-existent Shop"
        }
 Expected Response: 404 Not Found + message

→ Delete a shop:
 Method: DELETE
 URL: http://localhost:3000/shops/1 (Replace 1 with a valid shop ID)
 Expected Response: 200 OK + body

→ Delete shop with items (failure):
 Method: DELETE
 URL: http://localhost:3000/shops/1 (Ensure this shop has items)
Expected Response: 400 Bad Request + message

→ Delete non-existent shop (failure):
 Method: DELETE
 URL: http://localhost:3000/shops/9999
 Expected Response: 404 Not Found + message

--------------------------- Test Cases for Shop items Management -----------------------------

→ Successfully create a shop item:
 Method: POST
 URL: http://localhost:3000/shopItems
 Body: 
       {
              "name": "Item name",
              "price": 100.99,
              "shopId": 1 (Ensure this shop exists)
       }
 Expected Response: 201 Created + body

 → Create shop item without a name (failure):
 Method: POST
 URL: http://localhost:3000/shopItems
 Body: 
        {
            "price": 120.50,
            "shopId": 1 (Ensure this shop exists)
        }
 Expected Response: 400 Bad Request + message

 → Create shop item without a price (failure):
 Method: POST
 URL: http://localhost:3000/shopItems
 Body: 
        {
              "name": "Item name",
              "shopId": 1 (Ensure this shop exists)
        }
 Expected Response: 400 Bad Request + message

 → Create shop item with a negative price (failure):
 Method: POST
 URL: http://localhost:3000/shopItems
 Body: 
        {
              "name": "Item name",
              "price": -120.50,
              "shopId": 1 (Ensure this shop exists)
        }
 Expected Response: 400 Bad Request + message

 → Create shop item without a shop ID (failure):
 Method: POST
 URL: http://localhost:3000/shopItems
 Body: 
        {
              "name": "Item name",
              "price": 120.50
        }
 Expected Response: 400 Bad Request + message

→ Create shop item for a non-existent shop (failure):
 Method: POST
 URL: http://localhost:3000/shopItems
 Body: 
       {
              "name": "Item for non-existent shop",
              "price": 15.99,
              "shopId": 9999
       }
 Expected Response: 404 Not Found + message

→ Get all shop items:
 Method: GET
 URL: http://localhost:3000/shopItems
 Expected Response: 200 OK + body

→ Get a shop item by ID:
 Method: GET
 URL: http://localhost:3000/shopItems/1 (Replace 1 with a valid item ID)
 Expected Response: 200 OK + body

→  Invalid shop item ID (failure):
 Method: GET
 URL: http://localhost:3000/shopItems/9999
 Expected Response: 404 Not Found + message

→ Successfully update a shop item:
 Method: PUT
 URL: http://localhost:3000/shopItems/1 (Replace 1 with a valid item ID)
 Body: 
        {
               "name": "Updated item name",
               "price": 90.99
        }
 Expected Response: 200 OK + body

 →  Update a shop item without a name (failure):
 Method: PUT
 URL: http://localhost:3000/shopItems/1 (Replace 1 with a valid item ID)
 Body: 
        {
               "price": 190.99
        }
 Expected Response: 400 Bad Request + message

 →  Update a shop item without a price (failure):
 Method: PUT
 URL: http://localhost:3000/shopItems/1 (Replace 1 with a valid item ID)
 Body: 
        {
               "name": "Updated item name"
        }
 Expected Response: 400 Bad Request + message

  →  Update a shop item with a negative price (failure):
 Method: PUT
 URL: http://localhost:3000/shopItems/1 (Replace 1 with a valid item ID)
 Body: 
       {
              "name": "Updated item name",
              "price": -10.99
       }
 Expected Response: 400 Bad Request + message

→ Update non-existent shop item (failure):
 Method: PUT
 URL: http://localhost:3000/shopItems/9999
 Body: 
       {
              "name": "Non-existent Item",
              "price": 10.99
       }
 Expected Response: 404 Not Found + message

 → Delete a shop item:
 Method: DELETE
 URL: http://localhost:3000/shopItems/1 (Replace 1 with a valid shop ID)
 Expected Response: 200 OK + bodys

 → Delete a non-existent shop item (failure):
 Method: DELETE
 URL: http://localhost:3000/shopItems/9999
 Expected Response: 404 Not Found + message